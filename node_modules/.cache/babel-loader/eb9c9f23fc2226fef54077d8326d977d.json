{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport React from \"react\";\nimport { safeHtmlString } from \"../utils/functions\";\nvar ContentEditable = function (_super) {\n  __extends(ContentEditable, _super);\n  function ContentEditable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.focused = false;\n    _this.removed = false;\n    _this.preFocusedValue = \"\";\n    _this.onPaste = function (e) {\n      e.preventDefault();\n      var text = e.clipboardData.getData(\"text/plain\");\n      document.execCommand(\"insertHTML\", false, safeHtmlString(text));\n    };\n    _this.onFocus = function () {\n      _this.preFocusedValue = _this.getValue();\n      _this.focused = true;\n    };\n    _this.onBlur = function () {\n      _this.focused = false;\n      var ref = _this.props.innerEditableRef.current;\n      var _a = _this.props,\n        validator = _a.validator,\n        change = _a.change;\n      if (!_this.removed && ref) {\n        if (ref.innerText === \"\") {\n          _this.props.remove();\n          return;\n        }\n        if (validator) {\n          var valid = validator(_this.getValue());\n          if (!valid) {\n            ref.innerText = _this.preFocusedValue;\n            return;\n          }\n        }\n        change(ref.innerText);\n      }\n    };\n    _this.onKeyDown = function (e) {\n      if (e.keyCode === 13) {\n        e.preventDefault();\n        _this.focusInputRef();\n        return;\n      }\n      var removeOnBackspace = _this.props.removeOnBackspace;\n      var value = _this.getValue();\n      if (removeOnBackspace && e.keyCode === 8 && value === \"\") {\n        _this.removed = true;\n        _this.props.remove();\n        _this.focusInputRef();\n        return;\n      }\n    };\n    _this.getValue = function () {\n      var ref = _this.getRef();\n      return ref ? ref.innerText : \"\";\n    };\n    _this.getRef = function () {\n      return _this.props.innerEditableRef.current;\n    };\n    _this.focusInputRef = function () {\n      var inputRef = _this.props.inputRef;\n      if (inputRef && inputRef.current) {\n        inputRef.current.focus();\n      }\n    };\n    return _this;\n  }\n  ContentEditable.prototype.componentDidMount = function () {\n    this.preFocusedValue = this.getValue();\n  };\n  ContentEditable.prototype.render = function () {\n    var _a = this.props,\n      value = _a.value,\n      className = _a.className,\n      innerEditableRef = _a.innerEditableRef;\n    return React.createElement(\"div\", {\n      ref: innerEditableRef,\n      className: className,\n      contentEditable: true,\n      onPaste: this.onPaste,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onKeyDown: this.onKeyDown,\n      dangerouslySetInnerHTML: {\n        __html: safeHtmlString(value)\n      }\n    });\n  };\n  return ContentEditable;\n}(React.Component);\nexport { ContentEditable };","map":{"version":3,"mappings":"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","names":["React","safeHtmlString","__extends","_this","e","preventDefault","text","clipboardData","getData","document","execCommand","preFocusedValue","getValue","focused","ref","props","innerEditableRef","current","validator","change","removed","innerText","remove","valid","keyCode","focusInputRef","value","removeOnBackspace","getRef","inputRef","focus","ContentEditable","className","contentEditable","onPaste","onFocus","onBlur","onKeyDown","dangerouslySetInnerHTML","__html","Component"],"sources":["/home/abhilash/Desktop/new1-blog/node_modules/@pathofdev/react-tag-input/src/components/ContentEditable.tsx"],"sourcesContent":["import React from \"react\";\nimport {safeHtmlString} from \"../utils/functions\";\n\ninterface Props {\n  value: string;\n  className: string;\n  innerEditableRef: React.RefObject<HTMLDivElement>;\n  inputRef: React.RefObject<HTMLInputElement>;\n  change: (value: string) => void;\n  remove: () => void;\n  validator?: (value: string) => boolean;\n  removeOnBackspace?: boolean;\n}\n\nexport class ContentEditable extends React.Component<Props> {\n\n  // Track focus state of editable tag\n  focused: boolean = false;\n\n  // Track if element has been removed from DOM\n  removed: boolean = false;\n\n  // Save value before input is focused / user starts typing\n  preFocusedValue: string = \"\";\n\n  componentDidMount() {\n    this.preFocusedValue = this.getValue();\n  }\n\n  onPaste = (e: React.ClipboardEvent<HTMLDivElement>) => {\n\n    // Cancel paste event\n    e.preventDefault();\n\n    // Remove formatting from clipboard contents\n    const text = e.clipboardData.getData(\"text/plain\");\n\n    // Insert text manually from paste command\n    document.execCommand(\"insertHTML\", false, safeHtmlString(text));\n\n  }\n\n  onFocus = () => {\n    this.preFocusedValue = this.getValue();\n    this.focused = true;\n  }\n\n  onBlur = () => {\n\n    this.focused = false;\n\n    const ref = this.props.innerEditableRef.current;\n    const { validator, change } = this.props;\n\n    if (!this.removed && ref) {\n\n      // On blur, if no content in tag, remove it\n      if (ref.innerText === \"\") {\n        this.props.remove();\n        return;\n      }\n\n      // Validate input if needed\n      if (validator) {\n        const valid = validator(this.getValue());\n        // If invalidate, switch ref back to pre focused value\n        if (!valid) {\n          ref.innerText = this.preFocusedValue;\n          return;\n        }\n      }\n\n      change(ref.innerText);\n\n    }\n\n  }\n\n  onKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n\n    // On enter, focus main tag input\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      this.focusInputRef();\n      return;\n    }\n\n    // On backspace, if no content in ref, remove tag and focus main tag input\n    const { removeOnBackspace } = this.props;\n    const value = this.getValue();\n    if (removeOnBackspace && e.keyCode === 8 && value === \"\") {\n      this.removed = true;\n      this.props.remove();\n      this.focusInputRef();\n      return;\n    }\n\n  }\n\n  getValue = () => {\n    const ref = this.getRef();\n    return ref ? ref.innerText : \"\";\n  }\n\n  getRef = () => {\n    return this.props.innerEditableRef.current;\n  }\n\n  focusInputRef = () => {\n    const { inputRef } = this.props;\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }\n\n  render() {\n    const { value, className, innerEditableRef } = this.props;\n    return (\n      <div\n        ref={innerEditableRef}\n        className={className}\n        contentEditable={true}\n        onPaste={this.onPaste}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        onKeyDown={this.onKeyDown}\n        dangerouslySetInnerHTML={{ __html: safeHtmlString(value) }}\n      />\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}